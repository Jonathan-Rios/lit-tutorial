{"version":3,"file":"todo-list.js","sourceRoot":"","sources":["../src/todo-list.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAC,MAAM,mBAAmB,CAAC;AASjE,IAAa,QAAQ,GAArB,MAAa,QAAS,SAAQ,UAAU;IAAxC;;QASE,cAAS,GAAG;YACV,EAAE,IAAI,EAAE,iBAAiB,EAAE,SAAS,EAAE,IAAI,EAAE;YAC5C,EAAE,IAAI,EAAE,uBAAuB,EAAE,SAAS,EAAE,KAAK,EAAE;SACpD,CAAC;QAEF,kBAAa,GAAG,KAAK,CAAC;IA2DxB,CAAC;IAzDC,MAAM;QACJ,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa;YAC9B,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YAClD,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;QACnB,MAAM,KAAK,GAAG,IAAI,CAAA;;UAEZ,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACjB,IAAI,CAAA;;0BAEU,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE;2BAChC,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;kBACzC,IAAI,CAAC,IAAI;oBACP,CACX;;KAEJ,CAAC;QACF,MAAM,eAAe,GAAG,IAAI,CAAA;;;;KAI3B,CAAC;QACF,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;YACrC,CAAC,CAAC,KAAK;YACP,CAAC,CAAC,eAAe,CAAC;QAEpB,OAAO,IAAI,CAAA;;QAEP,cAAc;;uBAEC,IAAI,CAAC,OAAO;;;;oBAIf,IAAI,CAAC,gBAAgB;qBACpB,IAAI,CAAC,aAAa;;;KAGlC,CAAC;IACJ,CAAC;IAED,eAAe,CAAC,IAAc;QAC5B,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;QACjC,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,gBAAgB,CAAC,CAAQ;QACvB,IAAI,CAAC,aAAa,GAAI,CAAC,CAAC,MAA2B,CAAC,OAAO,CAAC;IAC9D,CAAC;IAKD,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QAChE,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;CACF,CAAA;AAxEQ,eAAM,GAAG,GAAG,CAAA;;;;;GAKlB,CAAC;AAGF;IADC,QAAQ,CAAC,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC;2CAI3B;AAEF;IADC,QAAQ,EAAE;+CACW;AAoDtB;IADC,KAAK,CAAC,UAAU,CAAC;uCACO;AAlEd,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CAyEpB;SAzEY,QAAQ","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property, query} from 'lit/decorators.js';\n\ntype ToDoItem = {\n  text: string,\n  completed: boolean\n};\n\n\n@customElement('todo-list')\nexport class ToDoList extends LitElement {\n  static styles = css`\n    .completed {\n      text-decoration-line: line-through;\n      color: #777;\n    }\n  `;\n\n  @property({attribute: false})\n  listItems = [\n    { text: 'Make to-do list', completed: true },\n    { text: 'Complete Lit tutorial', completed: false }\n  ];\n  @property()\n  hideCompleted = false;\n\n  render() {\n    const items = this.hideCompleted\n      ? this.listItems.filter((item) => !item.completed)\n      : this.listItems;\n    const todos = html`\n      <ul>\n        ${items.map((item) =>\n            html`\n              <li\n                  class=${item.completed ? 'completed' : ''}\n                  @click=${() => this.toggleCompleted(item)}>\n                ${item.text}\n              </li>`\n        )}\n      </ul>\n    `;\n    const caughtUpMessage = html`\n      <p>\n      You're all caught up!\n      </p>\n    `;\n    const todosOrMessage = items.length > 0\n      ? todos\n      : caughtUpMessage;\n\n    return html`\n      <h2>To Do</h2>\n      ${todosOrMessage}\n      <input id=\"newitem\" aria-label=\"New item\">\n      <button @click=${this.addToDo}>Add</button>\n      <br>\n      <label>\n        <input type=\"checkbox\"\n          @change=${this.setHideCompleted}\n          ?checked=${this.hideCompleted}>\n        Hide completed\n      </label>\n    `;\n  }\n\n  toggleCompleted(item: ToDoItem) {\n    item.completed = !item.completed;\n    this.requestUpdate();\n  }\n\n  setHideCompleted(e: Event) {\n    this.hideCompleted = (e.target as HTMLInputElement).checked;\n  }\n\n  @query('#newitem')\n  input!: HTMLInputElement;\n\n  addToDo() {\n    this.listItems.push({text: this.input.value, completed: false});\n    this.input.value = '';\n    this.requestUpdate();\n  }\n}"]}